// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: board_group.proto

package grpc_board

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BoardGroupServiceClient is the client API for BoardGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoardGroupServiceClient interface {
	GetAllBoardGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoardGroupsInfo, error)
	GetBoardId(ctx context.Context, in *GetBoardGroupRequest, opts ...grpc.CallOption) (*GetBoardGroupResponse, error)
	CreateBoardGroup(ctx context.Context, in *CreateBoardGroupRequest, opts ...grpc.CallOption) (*CreateBoardGroupResponse, error)
	UpdateBoardGroup(ctx context.Context, in *UpdateBoardGroupRequest, opts ...grpc.CallOption) (*UpdateBoardGroupResponse, error)
	DeleteBoardGroup(ctx context.Context, in *DeleteBoardGroupRequest, opts ...grpc.CallOption) (*DeleteBoardGroupResponse, error)
}

type boardGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoardGroupServiceClient(cc grpc.ClientConnInterface) BoardGroupServiceClient {
	return &boardGroupServiceClient{cc}
}

func (c *boardGroupServiceClient) GetAllBoardGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoardGroupsInfo, error) {
	out := new(BoardGroupsInfo)
	err := c.cc.Invoke(ctx, "/board_group.BoardGroupService/GetAllBoardGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardGroupServiceClient) GetBoardId(ctx context.Context, in *GetBoardGroupRequest, opts ...grpc.CallOption) (*GetBoardGroupResponse, error) {
	out := new(GetBoardGroupResponse)
	err := c.cc.Invoke(ctx, "/board_group.BoardGroupService/GetBoardId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardGroupServiceClient) CreateBoardGroup(ctx context.Context, in *CreateBoardGroupRequest, opts ...grpc.CallOption) (*CreateBoardGroupResponse, error) {
	out := new(CreateBoardGroupResponse)
	err := c.cc.Invoke(ctx, "/board_group.BoardGroupService/CreateBoardGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardGroupServiceClient) UpdateBoardGroup(ctx context.Context, in *UpdateBoardGroupRequest, opts ...grpc.CallOption) (*UpdateBoardGroupResponse, error) {
	out := new(UpdateBoardGroupResponse)
	err := c.cc.Invoke(ctx, "/board_group.BoardGroupService/UpdateBoardGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardGroupServiceClient) DeleteBoardGroup(ctx context.Context, in *DeleteBoardGroupRequest, opts ...grpc.CallOption) (*DeleteBoardGroupResponse, error) {
	out := new(DeleteBoardGroupResponse)
	err := c.cc.Invoke(ctx, "/board_group.BoardGroupService/DeleteBoardGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoardGroupServiceServer is the server API for BoardGroupService service.
// All implementations must embed UnimplementedBoardGroupServiceServer
// for forward compatibility
type BoardGroupServiceServer interface {
	GetAllBoardGroups(context.Context, *emptypb.Empty) (*BoardGroupsInfo, error)
	GetBoardId(context.Context, *GetBoardGroupRequest) (*GetBoardGroupResponse, error)
	CreateBoardGroup(context.Context, *CreateBoardGroupRequest) (*CreateBoardGroupResponse, error)
	UpdateBoardGroup(context.Context, *UpdateBoardGroupRequest) (*UpdateBoardGroupResponse, error)
	DeleteBoardGroup(context.Context, *DeleteBoardGroupRequest) (*DeleteBoardGroupResponse, error)
	mustEmbedUnimplementedBoardGroupServiceServer()
}

// UnimplementedBoardGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBoardGroupServiceServer struct {
}

func (UnimplementedBoardGroupServiceServer) GetAllBoardGroups(context.Context, *emptypb.Empty) (*BoardGroupsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBoardGroups not implemented")
}
func (UnimplementedBoardGroupServiceServer) GetBoardId(context.Context, *GetBoardGroupRequest) (*GetBoardGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardId not implemented")
}
func (UnimplementedBoardGroupServiceServer) CreateBoardGroup(context.Context, *CreateBoardGroupRequest) (*CreateBoardGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBoardGroup not implemented")
}
func (UnimplementedBoardGroupServiceServer) UpdateBoardGroup(context.Context, *UpdateBoardGroupRequest) (*UpdateBoardGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBoardGroup not implemented")
}
func (UnimplementedBoardGroupServiceServer) DeleteBoardGroup(context.Context, *DeleteBoardGroupRequest) (*DeleteBoardGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBoardGroup not implemented")
}
func (UnimplementedBoardGroupServiceServer) mustEmbedUnimplementedBoardGroupServiceServer() {}

// UnsafeBoardGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoardGroupServiceServer will
// result in compilation errors.
type UnsafeBoardGroupServiceServer interface {
	mustEmbedUnimplementedBoardGroupServiceServer()
}

func RegisterBoardGroupServiceServer(s grpc.ServiceRegistrar, srv BoardGroupServiceServer) {
	s.RegisterService(&BoardGroupService_ServiceDesc, srv)
}

func _BoardGroupService_GetAllBoardGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardGroupServiceServer).GetAllBoardGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_group.BoardGroupService/GetAllBoardGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardGroupServiceServer).GetAllBoardGroups(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardGroupService_GetBoardId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoardGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardGroupServiceServer).GetBoardId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_group.BoardGroupService/GetBoardId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardGroupServiceServer).GetBoardId(ctx, req.(*GetBoardGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardGroupService_CreateBoardGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBoardGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardGroupServiceServer).CreateBoardGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_group.BoardGroupService/CreateBoardGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardGroupServiceServer).CreateBoardGroup(ctx, req.(*CreateBoardGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardGroupService_UpdateBoardGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBoardGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardGroupServiceServer).UpdateBoardGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_group.BoardGroupService/UpdateBoardGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardGroupServiceServer).UpdateBoardGroup(ctx, req.(*UpdateBoardGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardGroupService_DeleteBoardGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBoardGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardGroupServiceServer).DeleteBoardGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board_group.BoardGroupService/DeleteBoardGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardGroupServiceServer).DeleteBoardGroup(ctx, req.(*DeleteBoardGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoardGroupService_ServiceDesc is the grpc.ServiceDesc for BoardGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoardGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "board_group.BoardGroupService",
	HandlerType: (*BoardGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllBoardGroups",
			Handler:    _BoardGroupService_GetAllBoardGroups_Handler,
		},
		{
			MethodName: "GetBoardId",
			Handler:    _BoardGroupService_GetBoardId_Handler,
		},
		{
			MethodName: "CreateBoardGroup",
			Handler:    _BoardGroupService_CreateBoardGroup_Handler,
		},
		{
			MethodName: "UpdateBoardGroup",
			Handler:    _BoardGroupService_UpdateBoardGroup_Handler,
		},
		{
			MethodName: "DeleteBoardGroup",
			Handler:    _BoardGroupService_DeleteBoardGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "board_group.proto",
}

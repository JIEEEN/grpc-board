// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: reply.proto

package grpc_board

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplyServiceClient is the client API for ReplyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplyServiceClient interface {
	GetReplyUser(ctx context.Context, in *GetReplyUserRequest, opts ...grpc.CallOption) (*GetReplyUserResponse, error)
	GetReplyNickname(ctx context.Context, in *GetReplyNicknameRequest, opts ...grpc.CallOption) (*GetReplyNicknameResponse, error)
	CreateReply(ctx context.Context, in *CreateReplyRequest, opts ...grpc.CallOption) (*CreateReplyResponse, error)
	GetAllReplyBoard(ctx context.Context, in *AllReplyBoardRequest, opts ...grpc.CallOption) (*AllReplyBoardResponse, error)
	UpdateReply(ctx context.Context, in *UpdateReplyRequest, opts ...grpc.CallOption) (*UpdateReplyResponse, error)
	DeleteReply(ctx context.Context, in *DeleteReplyRequest, opts ...grpc.CallOption) (*DeleteReplyResponse, error)
}

type replyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReplyServiceClient(cc grpc.ClientConnInterface) ReplyServiceClient {
	return &replyServiceClient{cc}
}

func (c *replyServiceClient) GetReplyUser(ctx context.Context, in *GetReplyUserRequest, opts ...grpc.CallOption) (*GetReplyUserResponse, error) {
	out := new(GetReplyUserResponse)
	err := c.cc.Invoke(ctx, "/reply.ReplyService/GetReplyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyServiceClient) GetReplyNickname(ctx context.Context, in *GetReplyNicknameRequest, opts ...grpc.CallOption) (*GetReplyNicknameResponse, error) {
	out := new(GetReplyNicknameResponse)
	err := c.cc.Invoke(ctx, "/reply.ReplyService/GetReplyNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyServiceClient) CreateReply(ctx context.Context, in *CreateReplyRequest, opts ...grpc.CallOption) (*CreateReplyResponse, error) {
	out := new(CreateReplyResponse)
	err := c.cc.Invoke(ctx, "/reply.ReplyService/CreateReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyServiceClient) GetAllReplyBoard(ctx context.Context, in *AllReplyBoardRequest, opts ...grpc.CallOption) (*AllReplyBoardResponse, error) {
	out := new(AllReplyBoardResponse)
	err := c.cc.Invoke(ctx, "/reply.ReplyService/GetAllReplyBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyServiceClient) UpdateReply(ctx context.Context, in *UpdateReplyRequest, opts ...grpc.CallOption) (*UpdateReplyResponse, error) {
	out := new(UpdateReplyResponse)
	err := c.cc.Invoke(ctx, "/reply.ReplyService/UpdateReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyServiceClient) DeleteReply(ctx context.Context, in *DeleteReplyRequest, opts ...grpc.CallOption) (*DeleteReplyResponse, error) {
	out := new(DeleteReplyResponse)
	err := c.cc.Invoke(ctx, "/reply.ReplyService/DeleteReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplyServiceServer is the server API for ReplyService service.
// All implementations must embed UnimplementedReplyServiceServer
// for forward compatibility
type ReplyServiceServer interface {
	GetReplyUser(context.Context, *GetReplyUserRequest) (*GetReplyUserResponse, error)
	GetReplyNickname(context.Context, *GetReplyNicknameRequest) (*GetReplyNicknameResponse, error)
	CreateReply(context.Context, *CreateReplyRequest) (*CreateReplyResponse, error)
	GetAllReplyBoard(context.Context, *AllReplyBoardRequest) (*AllReplyBoardResponse, error)
	UpdateReply(context.Context, *UpdateReplyRequest) (*UpdateReplyResponse, error)
	DeleteReply(context.Context, *DeleteReplyRequest) (*DeleteReplyResponse, error)
	mustEmbedUnimplementedReplyServiceServer()
}

// UnimplementedReplyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReplyServiceServer struct {
}

func (UnimplementedReplyServiceServer) GetReplyUser(context.Context, *GetReplyUserRequest) (*GetReplyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplyUser not implemented")
}
func (UnimplementedReplyServiceServer) GetReplyNickname(context.Context, *GetReplyNicknameRequest) (*GetReplyNicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplyNickname not implemented")
}
func (UnimplementedReplyServiceServer) CreateReply(context.Context, *CreateReplyRequest) (*CreateReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReply not implemented")
}
func (UnimplementedReplyServiceServer) GetAllReplyBoard(context.Context, *AllReplyBoardRequest) (*AllReplyBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReplyBoard not implemented")
}
func (UnimplementedReplyServiceServer) UpdateReply(context.Context, *UpdateReplyRequest) (*UpdateReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReply not implemented")
}
func (UnimplementedReplyServiceServer) DeleteReply(context.Context, *DeleteReplyRequest) (*DeleteReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReply not implemented")
}
func (UnimplementedReplyServiceServer) mustEmbedUnimplementedReplyServiceServer() {}

// UnsafeReplyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplyServiceServer will
// result in compilation errors.
type UnsafeReplyServiceServer interface {
	mustEmbedUnimplementedReplyServiceServer()
}

func RegisterReplyServiceServer(s grpc.ServiceRegistrar, srv ReplyServiceServer) {
	s.RegisterService(&ReplyService_ServiceDesc, srv)
}

func _ReplyService_GetReplyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServiceServer).GetReplyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reply.ReplyService/GetReplyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServiceServer).GetReplyUser(ctx, req.(*GetReplyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplyService_GetReplyNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplyNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServiceServer).GetReplyNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reply.ReplyService/GetReplyNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServiceServer).GetReplyNickname(ctx, req.(*GetReplyNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplyService_CreateReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServiceServer).CreateReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reply.ReplyService/CreateReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServiceServer).CreateReply(ctx, req.(*CreateReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplyService_GetAllReplyBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllReplyBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServiceServer).GetAllReplyBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reply.ReplyService/GetAllReplyBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServiceServer).GetAllReplyBoard(ctx, req.(*AllReplyBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplyService_UpdateReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServiceServer).UpdateReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reply.ReplyService/UpdateReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServiceServer).UpdateReply(ctx, req.(*UpdateReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplyService_DeleteReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServiceServer).DeleteReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reply.ReplyService/DeleteReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServiceServer).DeleteReply(ctx, req.(*DeleteReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReplyService_ServiceDesc is the grpc.ServiceDesc for ReplyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reply.ReplyService",
	HandlerType: (*ReplyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReplyUser",
			Handler:    _ReplyService_GetReplyUser_Handler,
		},
		{
			MethodName: "GetReplyNickname",
			Handler:    _ReplyService_GetReplyNickname_Handler,
		},
		{
			MethodName: "CreateReply",
			Handler:    _ReplyService_CreateReply_Handler,
		},
		{
			MethodName: "GetAllReplyBoard",
			Handler:    _ReplyService_GetAllReplyBoard_Handler,
		},
		{
			MethodName: "UpdateReply",
			Handler:    _ReplyService_UpdateReply_Handler,
		},
		{
			MethodName: "DeleteReply",
			Handler:    _ReplyService_DeleteReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reply.proto",
}

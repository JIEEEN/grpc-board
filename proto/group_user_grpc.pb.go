// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: group_user.proto

package grpc_board

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupUserServiceClient is the client API for GroupUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupUserServiceClient interface {
	GetAllGroupUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GroupUsersInfo, error)
	GetGroupUserId(ctx context.Context, in *GetGroupUserRequest, opts ...grpc.CallOption) (*GetGroupUserResponse, error)
	CreateGroupUser(ctx context.Context, in *CreateGroupUserRequest, opts ...grpc.CallOption) (*CreateGroupUserResponse, error)
	UpdateGroupUser(ctx context.Context, in *UpdateGroupUserRequest, opts ...grpc.CallOption) (*UpdateGroupUserResponse, error)
	DeleteGroupUser(ctx context.Context, in *DeleteGroupUserRequest, opts ...grpc.CallOption) (*DeleteGroupUserResponse, error)
}

type groupUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupUserServiceClient(cc grpc.ClientConnInterface) GroupUserServiceClient {
	return &groupUserServiceClient{cc}
}

func (c *groupUserServiceClient) GetAllGroupUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GroupUsersInfo, error) {
	out := new(GroupUsersInfo)
	err := c.cc.Invoke(ctx, "/group_user.GroupUserService/GetAllGroupUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupUserServiceClient) GetGroupUserId(ctx context.Context, in *GetGroupUserRequest, opts ...grpc.CallOption) (*GetGroupUserResponse, error) {
	out := new(GetGroupUserResponse)
	err := c.cc.Invoke(ctx, "/group_user.GroupUserService/GetGroupUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupUserServiceClient) CreateGroupUser(ctx context.Context, in *CreateGroupUserRequest, opts ...grpc.CallOption) (*CreateGroupUserResponse, error) {
	out := new(CreateGroupUserResponse)
	err := c.cc.Invoke(ctx, "/group_user.GroupUserService/CreateGroupUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupUserServiceClient) UpdateGroupUser(ctx context.Context, in *UpdateGroupUserRequest, opts ...grpc.CallOption) (*UpdateGroupUserResponse, error) {
	out := new(UpdateGroupUserResponse)
	err := c.cc.Invoke(ctx, "/group_user.GroupUserService/UpdateGroupUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupUserServiceClient) DeleteGroupUser(ctx context.Context, in *DeleteGroupUserRequest, opts ...grpc.CallOption) (*DeleteGroupUserResponse, error) {
	out := new(DeleteGroupUserResponse)
	err := c.cc.Invoke(ctx, "/group_user.GroupUserService/DeleteGroupUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupUserServiceServer is the server API for GroupUserService service.
// All implementations must embed UnimplementedGroupUserServiceServer
// for forward compatibility
type GroupUserServiceServer interface {
	GetAllGroupUsers(context.Context, *emptypb.Empty) (*GroupUsersInfo, error)
	GetGroupUserId(context.Context, *GetGroupUserRequest) (*GetGroupUserResponse, error)
	CreateGroupUser(context.Context, *CreateGroupUserRequest) (*CreateGroupUserResponse, error)
	UpdateGroupUser(context.Context, *UpdateGroupUserRequest) (*UpdateGroupUserResponse, error)
	DeleteGroupUser(context.Context, *DeleteGroupUserRequest) (*DeleteGroupUserResponse, error)
	mustEmbedUnimplementedGroupUserServiceServer()
}

// UnimplementedGroupUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupUserServiceServer struct {
}

func (UnimplementedGroupUserServiceServer) GetAllGroupUsers(context.Context, *emptypb.Empty) (*GroupUsersInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGroupUsers not implemented")
}
func (UnimplementedGroupUserServiceServer) GetGroupUserId(context.Context, *GetGroupUserRequest) (*GetGroupUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupUserId not implemented")
}
func (UnimplementedGroupUserServiceServer) CreateGroupUser(context.Context, *CreateGroupUserRequest) (*CreateGroupUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupUser not implemented")
}
func (UnimplementedGroupUserServiceServer) UpdateGroupUser(context.Context, *UpdateGroupUserRequest) (*UpdateGroupUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupUser not implemented")
}
func (UnimplementedGroupUserServiceServer) DeleteGroupUser(context.Context, *DeleteGroupUserRequest) (*DeleteGroupUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupUser not implemented")
}
func (UnimplementedGroupUserServiceServer) mustEmbedUnimplementedGroupUserServiceServer() {}

// UnsafeGroupUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupUserServiceServer will
// result in compilation errors.
type UnsafeGroupUserServiceServer interface {
	mustEmbedUnimplementedGroupUserServiceServer()
}

func RegisterGroupUserServiceServer(s grpc.ServiceRegistrar, srv GroupUserServiceServer) {
	s.RegisterService(&GroupUserService_ServiceDesc, srv)
}

func _GroupUserService_GetAllGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupUserServiceServer).GetAllGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group_user.GroupUserService/GetAllGroupUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupUserServiceServer).GetAllGroupUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupUserService_GetGroupUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupUserServiceServer).GetGroupUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group_user.GroupUserService/GetGroupUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupUserServiceServer).GetGroupUserId(ctx, req.(*GetGroupUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupUserService_CreateGroupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupUserServiceServer).CreateGroupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group_user.GroupUserService/CreateGroupUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupUserServiceServer).CreateGroupUser(ctx, req.(*CreateGroupUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupUserService_UpdateGroupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupUserServiceServer).UpdateGroupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group_user.GroupUserService/UpdateGroupUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupUserServiceServer).UpdateGroupUser(ctx, req.(*UpdateGroupUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupUserService_DeleteGroupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupUserServiceServer).DeleteGroupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group_user.GroupUserService/DeleteGroupUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupUserServiceServer).DeleteGroupUser(ctx, req.(*DeleteGroupUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupUserService_ServiceDesc is the grpc.ServiceDesc for GroupUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "group_user.GroupUserService",
	HandlerType: (*GroupUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllGroupUsers",
			Handler:    _GroupUserService_GetAllGroupUsers_Handler,
		},
		{
			MethodName: "GetGroupUserId",
			Handler:    _GroupUserService_GetGroupUserId_Handler,
		},
		{
			MethodName: "CreateGroupUser",
			Handler:    _GroupUserService_CreateGroupUser_Handler,
		},
		{
			MethodName: "UpdateGroupUser",
			Handler:    _GroupUserService_UpdateGroupUser_Handler,
		},
		{
			MethodName: "DeleteGroupUser",
			Handler:    _GroupUserService_DeleteGroupUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group_user.proto",
}
